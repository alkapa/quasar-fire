// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package quasar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuasarFireClient is the client API for QuasarFire service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuasarFireClient interface {
	TopSecret(ctx context.Context, in *TopSecretRequest, opts ...grpc.CallOption) (*TopSecretResponse, error)
	TopSecretSplitGet(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*TopSecretResponse, error)
	TopSecretSplitSet(ctx context.Context, in *SatelliteSecretMessage, opts ...grpc.CallOption) (*TopSecretResponse, error)
}

type quasarFireClient struct {
	cc grpc.ClientConnInterface
}

func NewQuasarFireClient(cc grpc.ClientConnInterface) QuasarFireClient {
	return &quasarFireClient{cc}
}

func (c *quasarFireClient) TopSecret(ctx context.Context, in *TopSecretRequest, opts ...grpc.CallOption) (*TopSecretResponse, error) {
	out := new(TopSecretResponse)
	err := c.cc.Invoke(ctx, "/quasar.v1.QuasarFire/TopSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quasarFireClient) TopSecretSplitGet(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*TopSecretResponse, error) {
	out := new(TopSecretResponse)
	err := c.cc.Invoke(ctx, "/quasar.v1.QuasarFire/TopSecretSplitGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quasarFireClient) TopSecretSplitSet(ctx context.Context, in *SatelliteSecretMessage, opts ...grpc.CallOption) (*TopSecretResponse, error) {
	out := new(TopSecretResponse)
	err := c.cc.Invoke(ctx, "/quasar.v1.QuasarFire/TopSecretSplitSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuasarFireServer is the server API for QuasarFire service.
// All implementations should embed UnimplementedQuasarFireServer
// for forward compatibility
type QuasarFireServer interface {
	TopSecret(context.Context, *TopSecretRequest) (*TopSecretResponse, error)
	TopSecretSplitGet(context.Context, *anypb.Any) (*TopSecretResponse, error)
	TopSecretSplitSet(context.Context, *SatelliteSecretMessage) (*TopSecretResponse, error)
}

// UnimplementedQuasarFireServer should be embedded to have forward compatible implementations.
type UnimplementedQuasarFireServer struct {
}

func (UnimplementedQuasarFireServer) TopSecret(context.Context, *TopSecretRequest) (*TopSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopSecret not implemented")
}
func (UnimplementedQuasarFireServer) TopSecretSplitGet(context.Context, *anypb.Any) (*TopSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopSecretSplitGet not implemented")
}
func (UnimplementedQuasarFireServer) TopSecretSplitSet(context.Context, *SatelliteSecretMessage) (*TopSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopSecretSplitSet not implemented")
}

// UnsafeQuasarFireServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuasarFireServer will
// result in compilation errors.
type UnsafeQuasarFireServer interface {
	mustEmbedUnimplementedQuasarFireServer()
}

func RegisterQuasarFireServer(s grpc.ServiceRegistrar, srv QuasarFireServer) {
	s.RegisterService(&QuasarFire_ServiceDesc, srv)
}

func _QuasarFire_TopSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuasarFireServer).TopSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasar.v1.QuasarFire/TopSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuasarFireServer).TopSecret(ctx, req.(*TopSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuasarFire_TopSecretSplitGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuasarFireServer).TopSecretSplitGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasar.v1.QuasarFire/TopSecretSplitGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuasarFireServer).TopSecretSplitGet(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuasarFire_TopSecretSplitSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SatelliteSecretMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuasarFireServer).TopSecretSplitSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasar.v1.QuasarFire/TopSecretSplitSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuasarFireServer).TopSecretSplitSet(ctx, req.(*SatelliteSecretMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// QuasarFire_ServiceDesc is the grpc.ServiceDesc for QuasarFire service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuasarFire_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quasar.v1.QuasarFire",
	HandlerType: (*QuasarFireServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopSecret",
			Handler:    _QuasarFire_TopSecret_Handler,
		},
		{
			MethodName: "TopSecretSplitGet",
			Handler:    _QuasarFire_TopSecretSplitGet_Handler,
		},
		{
			MethodName: "TopSecretSplitSet",
			Handler:    _QuasarFire_TopSecretSplitSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quasar.v1.proto",
}
